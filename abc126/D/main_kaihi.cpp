#include <bits/stdc++.h>
#include <vector>
using namespace std;

using Edge = pair<int, int>;
using Graph = vector<vector<Edge>>;

long long N;
Graph G;
vector<int> res;

void dfs(int par, int now_node, int color) {
    res[now_node] = color;
    for (auto e : G[now_node]) {
        if (e.first == par) continue;

        if (e.second & 1) {
            dfs(now_node, e.first, 1 - color);
        }
        else
        {
            dfs(now_node, e.first, color);
        }
        
    }
}

void solve(long long N, std::vector<long long> u, std::vector<long long> v, std::vector<long long> w){
    for (int i=0; i<N-1;i++) {
        G[u[i]].push_back(Edge(v[i], w[i]));
        G[v[i]].push_back(Edge(u[i], w[i]));
    }
    res.assign(N, 0);
    dfs(-1, 0, 1);
    for (int i=0; i<N;i++) {
        cout << res[i] << endl;
    }
}

// Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    scanf("%lld",&N);
    std::vector<long long> u(N-1);
    std::vector<long long> v(N-1);
    std::vector<long long> w(N-1);
    for(int i = 0 ; i < N-1 ; i++){
        scanf("%lld",&u[i]);
        scanf("%lld",&v[i]);
        scanf("%lld",&w[i]);
        --u[i];
        --v[i];
        --w[i];
    }
    solve(N, std::move(u), std::move(v), std::move(w));
    return 0;
}
