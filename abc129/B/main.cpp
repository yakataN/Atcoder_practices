#include<iostream>
#include<string>
#include<algorithm>
#include<vector>
#include<iomanip>
#include<math.h>
#include<complex>
#include<queue>
#include<deque>
#include<stack>
#include<map>
#include<set>
#include<bitset>
#include<functional>
#include<assert.h>
#include<numeric>
using namespace std;
#define REP(i,m,n) for(int i=(int)(m) ; i < (int) (n) ; ++i )
#define rep(i,n) REP(i,0,n)
using ll = long long;
const int inf=1e9+7;
const ll longinf=1LL<<60 ;
const ll mod=1e9+7 ;



void solve(long long N, std::vector<long long> W){
    vector<ll> ruisekiwa;
    ruisekiwa.push_back(0);
    ll ans;
    REP(i,1,N+1) {
        // ruisekiwa[i] = ruisekiwa[i-1] + W[i];
        ruisekiwa.push_back(ruisekiwa[i-1] + W[i-1]);
    }
    // rep(i,N+1) cout << ruisekiwa[i] << endl;
    ll hanbun = ruisekiwa[N]/2;
    REP(i,1,N+1) {
        if (ruisekiwa[i-1] <= hanbun && ruisekiwa[i] >= hanbun) {
            ll left = abs(ruisekiwa[N] - ruisekiwa[i-1] * 2);
            ll right = abs(ruisekiwa[N] - ruisekiwa[i] * 2);

            ans = min({left, right});
        }
    }

    cout << ans << endl;
    
}

// Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long N;
    scanf("%lld",&N);
    std::vector<long long> W(N);
    for(int i = 0 ; i < N ; i++){
        scanf("%lld",&W[i]);
    }
    solve(N, std::move(W));
    // return 0;
}
