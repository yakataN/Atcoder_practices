#include<iostream>
#include<string>
#include<algorithm>
#include<vector>
#include<iomanip>
#include<math.h>
#include<complex>
#include<queue>
#include<deque>
#include<stack>
#include<map>
#include<set>
#include<bitset>
#include<functional>
#include<assert.h>
#include<numeric>
using namespace std;
#define REP(i,m,n) for(int i=(int)(m) ; i < (int) (n) ; ++i )
#define rep(i,n) REP(i,0,n)
using ll = long long;
const int inf=1e9+7;
const ll longinf=1LL<<60 ;
const ll mod=1e9+7 ;



void solve(long long H, long long W, std::vector<std::string> S){
    int x[H][W];
    int y[H][W];
    int tmpx = 0;
    int tmpy = 0;
    rep(j,W) rep(i,H+1) {
        // xの更新
        cout << "hello"<< endl;
        if (i==0) tmpx=0;
        if (S[i][j] == '#') {
            for (int k=tmpx;k<i;k++) {
                x[k][j] = i-tmpx;
            }
            x[i][j] = 0;
            tmpx = i+1;
            cout << "hello#"<< endl;
            cout << x[i-1][j] << endl;
        }
        if (i == H) {
            for (int k=tmpx;k<H;k++) {
                x[k][j] = H-tmpx;
            }
            rep(i,H) {
                cout << x[i][0] << endl;
            }
        }
    }
    cout << "hello second"<< endl;
    rep(i,H) {
        rep(j,W) {
            // yの更新
            if (j==0) tmpy=0;
            if (S[i][j] == '#') {
                REP(k,tmpy,j) {
                    y[i][k] == j-tmpy;
                }
                y[i][j] = 0;
                tmpy = j+1;
            }
        }
    }
    int ans = 0;
    rep(i,H) rep(j,W) ans = max(ans, x[i][j] + y[i][j]);

    cout << ans << endl;
}

// Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main() {
    long long H;
    scanf("%lld",&H);
    long long W;
    scanf("%lld",&W);
    std::vector<std::string> S(H);
    for(int i = 0 ; i < H ; i++){
        std::cin >> S[i];
    }
    solve(H, W, std::move(S));
    // return 0;
}
