#include<iostream>
#include<string>
#include<algorithm>
#include<vector>
#include<iomanip>
#include<math.h>
#include<complex>
#include<queue>
#include<deque>
#include<stack>
#include<map>
#include<set>
#include<bitset>
#include<functional>
#include<assert.h>
#include<numeric>
using namespace std;
#define REP(i,m,n) for(int i=(int)(m) ; i < (int) (n) ; ++i )
#define rep(i,n) REP(i,0,n)
using ll = long long;
const int inf=1e9+7;
const ll longinf=1LL<<60 ;
const ll mod=1e9+7 ;


// Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    int n;
    cin >> n;
    priority_queue<ll> l_que;
    priority_queue<ll,vector<ll>, greater<ll> > r_que;
    l_que.emplace(-mod);
    r_que.emplace(mod);
    ll b_sum = 0;
    ll l_sum = 0;
    ll r_sum = 0;
    rep(i,n) {
        int x;
        cin >> x;
        if (x == 1) {
            ll a,b;
            cin >> a >> b;
            b_sum += b;
            if (l_que.size() == r_que.size()) {
                if (l_que.top() >= a) {
                    l_que.emplace(a);
                    l_sum += a;
                }
                else
                {
                    r_que.emplace(a);
                    r_sum += a;
                    ll tmp_num = r_que.top(); r_que.pop();
                    r_sum -= tmp_num;
                    l_que.emplace(tmp_num);
                    l_sum += tmp_num;
                }
            }
            else
            {
                if (l_que.top() >= a) {
                    l_que.emplace(a);
                    l_sum += a;
                    ll tmp_num = l_que.top(); l_que.pop();
                    l_sum -= tmp_num;
                    r_que.emplace(tmp_num);
                    r_sum += tmp_num;
                }
                else
                {
                    r_que.emplace(a);
                    r_sum += a;
                }
            }
            // cout << "1 come" << endl;
            // cout << l_que.top() << " " << r_que.top() << endl;
        }
        else if (x == 2) {
            ll min_num = l_que.top();
            // cout << "debug" << endl;
            // cout << "lquesize" << l_que.size() << endl;
            // cout << "rquesize" << r_que.size() << endl;
            // cout << "minnum" << min_num << endl;
            // cout << "lsum" << l_sum << endl;
            // cout << "rsum" << r_sum << endl;
            // cout << "bsum" << b_sum << endl;
            // cout << "debug finished" << endl;

            ll ans = (l_que.size() - r_que.size()) * min_num - l_sum + r_sum + b_sum;
            cout << min_num << " " << ans << endl;
        }
    }


    // Failed to predict input format
    return 0;
}
