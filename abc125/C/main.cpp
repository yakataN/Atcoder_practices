#include <bits/stdc++.h>
#include <algorithm>
using namespace std;

long long gcd(long long a, long long b) {
    if (a == 0) return b;
    if (b == 0) return a;
    return gcd(b, a%b);
}

long long max_num(long long a, long long b) {
    if (a >= b) {
        return a;
    } else if (a < b)
    {
        return b;
    }
    
}

void solve(long long N, std::vector<long long> A){
    vector<long long> l_gcd(N);
    vector<long long> r_gcd(N);

    for (int i=0; i<N; i++) {
        if (i == 0) {
            l_gcd[i] = A[i];
        } else {
            l_gcd[i] = gcd(l_gcd[i-1], A[i]);
        }
    }
    for (int i = N-1; i>=0;i--) {
        if (i == N-1) {
            r_gcd[i] = A[i];
        } else {
            r_gcd[i] = gcd(r_gcd[i+1], A[i]);
        }
    }
    long long max = 0;
    for (int i=0; i<N; i++) {
        if (i == 0) {
            max = max_num(max, r_gcd[i+1]);
        }
        else if (i == N-1)
        {
            max = max_num(max, l_gcd[i-1]);
        }
        else
        {
            max = max_num(max, gcd(l_gcd[i-1], r_gcd[i+1]));
        }
    }
    cout << max << endl;
}


// Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long N;
    scanf("%lld",&N);
    std::vector<long long> A(N);
    for(int i = 0 ; i < N ; i++){
        scanf("%lld",&A[i]);
    }
    solve(N, std::move(A));
    return 0;
}
