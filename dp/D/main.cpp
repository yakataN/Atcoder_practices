#include<iostream>
#include<string>
#include<algorithm>
#include<vector>
#include<iomanip>
#include<math.h>
#include<complex>
#include<queue>
#include<deque>
#include<stack>
#include<map>
#include<set>
#include<bitset>
#include<functional>
#include<assert.h>
#include<numeric>
using namespace std;
#define REP(i,m,n) for(int i=(int)(m) ; i < (int) (n) ; ++i )
#define rep(i,n) REP(i,0,n)
using ll = long long;
const int inf=1e9+7;
const ll longinf=1LL<<60 ;
const ll mod=1e9+7 ;


ll dp[110][101010];

void solve(long long N, long long W, long long w[], long long v[]){
    rep(i,W+1) dp[0][i]=0;
    rep(i,N) {
        // cout << endl;
        rep(j,W+1) {
            if (j-w[i]>=0) {
                dp[i+1][j] = max(dp[i][j], dp[i][j-w[i]]+v[i]);
            }
            else
            {
                dp[i+1][j] = dp[i][j];
            }
            // cout << dp[i+1][j] << endl;
        }
        // cout << dp[i][W] << endl;
    }
    // cout << endl;
    cout << dp[N][W] << endl;
}

// Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long N;
    cin >> N;
    long long W;
    cin >> W;
    long long w[N];
    long long v[N];
    for(int i = 0 ; i < N ; i++){
        cin >> w[i] >> v[i];
    }
    solve(N, W, w, v);
    return 0;
}
