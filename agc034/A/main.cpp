#include<iostream>
#include<string>
#include<algorithm>
#include<vector>
#include<iomanip>
#include<math.h>
#include<complex>
#include<queue>
#include<deque>
#include<stack>
#include<map>
#include<set>
#include<bitset>
#include<functional>
#include<assert.h>
#include<numeric>
using namespace std;
#define REP(i,m,n) for(int i=(int)(m) ; i < (int) (n) ; ++i )
#define rep(i,n) REP(i,0,n)
using ll = long long;
const int inf=1e9+7;
const ll longinf=1LL<<60 ;
const ll mod=1e9+7 ;

bool solve(string s, ll start, ll stop) {
    // cout << "solve" << endl;
    bool flag = false;
    for (int i = start+1; i <= stop; i++) {
        if (s[i] == '#') {
            // cout << "#" << endl;
            if (flag) return false;
            flag = true;
        }
        else
        {
            // cout << "." << endl;
            flag = false;
        }
    }
    return true;
}

bool can_throw(string S, ll start, ll stop) {
    // return true;
    for (int i = start; i <= stop; i++) {
        if (S[i-1] == '.' and S[i] == '.' and S[i+1] == '.') {
            return true;
        }
    }
    return false;
}

// Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long N;
    scanf("%lld",&N);
    long long A;
    scanf("%lld",&A);
    long long B;
    scanf("%lld",&B);
    long long C;
    scanf("%lld",&C);
    long long D;
    scanf("%lld",&D);
    // 0indexs
    A--;
    B--;
    C--;
    D--;
    std::string S;
    std::cin >> S;

    if ((C < D) or (C < B)) {
        if (solve(S, A, C) and solve(S, B, D)) {
            cout << "Yes" << endl;
        }
        else
        {
            cout << "No" << endl;
        }
    }
    else
    {
        if (solve(S, A, C) and solve(S, B, D)) {
            if ( can_throw(S, max({A, B}), min({C, D})) ) {
                cout << "Yes" << endl;
            }
            else
            {
                cout << "No" << endl;
            }
        }
        else
        {
            cout << "No" << endl;
        }
    }
    
}
