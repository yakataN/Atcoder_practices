#include<iostream>
#include<string>
#include<algorithm>
#include<vector>
#include<iomanip>
#include<math.h>
#include<complex>
#include<queue>
#include<deque>
#include<stack>
#include<map>
#include<set>
#include<bitset>
#include<functional>
#include<assert.h>
#include<numeric>
using namespace std;
#define REP(i,m,n) for(int i=(int)(m) ; i < (int) (n) ; ++i )
#define rep(i,n) REP(i,0,n)
using ll = long long;
const int inf=1e9+7;
const ll longinf=1LL<<60 ;
const ll mod=1e9+7 ;



void solve(long long N, long long g_A, long long s_A, long long b_A, long long g_B, long long s_B, long long b_B){
    ll gbga = g_B - g_A;
    ll sbsa = s_B - s_A;
    ll bbba = b_B - b_A;
    ll value[3];
    value[0] = gbga;
    value[1] = sbsa;
    value[2] = bbba;
    ll weightA[3];
    ll weightB[3];
    weightA[0] = g_A;
    weightA[1] = s_A;
    weightA[2] = b_A;
    weightB[0] = g_B;
    weightB[1] = s_B;
    weightB[2] = b_B;


    // g_Aâ†’gbga
    ll dpA[N+1][N+1];
    ll dpB[N+1][N+1];
    rep(i, N+1) dpA[0][i] = 0;
    rep(i, N+1) dpB[0][i] = 0;
    rep(i,N+1) {
        rep(j,N+1) {
            rep(k,3) {
                dpA[i][j] = max(dpA[i][j-weightA[k]] + value[k], dpA[i-1][j]);
            }
        }
    }
    rep(i,N+1) {
        rep(j,N+1) {
            rep(k,3) {
                dpB[i][j] = max(dpB[i][j-weightB[k]] - value[k], dpB[i-1][j]);
            }
        }
    }
    ll tmpA = dpA[N-1][N-1];
    ll tmpB = dpB[N-1][N-1];
    cout << tmpA + tmpB << endl;
}

// Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long N;
    scanf("%lld",&N);
    long long g_A;
    scanf("%lld",&g_A);
    long long s_A;
    scanf("%lld",&s_A);
    long long b_A;
    scanf("%lld",&b_A);
    long long g_B;
    scanf("%lld",&g_B);
    long long s_B;
    scanf("%lld",&s_B);
    long long b_B;
    scanf("%lld",&b_B);
    solve(N, g_A, s_A, b_A, g_B, s_B, b_B);
    // return 0;
}
